name: template_aur

on:
  workflow_call:
    inputs:
      repo_url:
        required: true
        type: string
      repo_pkg:
        required: true
        type: string
      makepkgArgs:
        type: string
      multilib:
        type: boolean
        default: false
      nvidiaUtils:
        type: boolean
        default: false
      ref:
        type: string
        default: ""
  workflow_dispatch:
    inputs:
      repo_url:
        required: true
        type: string
      repo_pkg:
        required: true
        type: string
      makepkgArgs:
        type: string
      multilib:
        type: boolean
        default: false
      nvidiaUtils:
        type: boolean
        default: false
      ref:
        type: string
        default: ""

jobs:
  architecture:
    runs-on: ubuntu-latest
    outputs:
      build_arch: ${{ steps.get_arch.outputs.build_arch }}
      ref: ${{ steps.get_ref.outputs.ref }}
    steps:
      - name: Set target ref
        id: get_ref
        run: |
          input_ref=${{ inputs.ref }}
          echo "ref=${input_ref:-$GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
      - name: Match architecture
        id: get_arch
        run: |
          case ${{ steps.get_ref.outputs.ref }} in
            main)
              echo "build_arch=alderlake" >> $GITHUB_OUTPUT
              ;;
            generic)
              echo "build_arch=generic_x86_64" >> $GITHUB_OUTPUT
              ;;
            *)
              exit 1
              ;;
          esac
  sanity:
    runs-on: ubuntu-latest
    needs: architecture
    outputs:
      status: ${{ steps.update.outputs.update }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ needs.architecture.outputs.ref }}
    - name: Compare Package
      id: update
      run: |
        source functions.sh && echo "sum=$(genLocalSum ${{ inputs.repo_pkg }})" >> $GITHUB_OUTPUT
        source functions.sh && echo $(checkLocalVersion ${{ inputs.repo_pkg }}) >> $GITHUB_OUTPUT
  package: 
    runs-on: ubuntu-latest
    needs: [architecture,sanity]
    if: ${{ needs.sanity.outputs.status == 'true' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ needs.architecture.outputs.ref }}
    - name: Clone Package
      run: |
        source functions.sh && git-svn ${{ inputs.repo_url }} aur/${{ inputs.repo_pkg }}
    - name: Set PKGBUILD architecture 
      run: |
        ref=${{ needs.architecture.outputs.ref }}
        echo ${ref}
        [[ "${ref}" != 'generic' ]] && sed -i 's/=nocona/=${{ needs.architecture.outputs.build_arch }}/g;s/=core-avx3/=${{ needs.architecture.outputs.build_arch }}/g' ${{ inputs.repo_pkg }}/PKGBUILD
    - name: Makepkg Build and Check
      id: makepkg
      uses: highkeep/pkgbuild-action@master
      with:
        pkgdir: ${{ inputs.repo_pkg }}
        pacmanConf: "configs/${{ needs.architecture.outputs.build_arch }}_pacman.conf"
        makepkgConf: "configs/${{ needs.architecture.outputs.build_arch }}_makepkg.conf"
        makepkgArgs: ${{ inputs.makepkgArgs }}
        multilib: ${{ inputs.multilib }}
        nvidiaUtils: ${{ inputs.nvidiaUtils }}
        repoReleaseTag: "${{ needs.architecture.outputs.build_arch }}"
    - name: Print Package Files
      run: |
        echo "Successfully created the following package archive"
        echo "Package: ${{ steps.makepkg.outputs.pkgfile0 }}"
        echo "Package: ${{ steps.makepkg.outputs.repofile0 }}"
        echo "Package: ${{ steps.makepkg.outputs.repofile1 }}"
        echo "Package: ${{ steps.makepkg.outputs.repofile2 }}"
        echo "Package: ${{ steps.makepkg.outputs.repofile3 }}"
    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{secrets.GITHUB_TOKEN}}
        tag: ${{ needs.architecture.outputs.build_arch }}
        file: ${{ steps.makepkg.outputs.pkgfile0 }}
        overwrite: true
    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{secrets.GITHUB_TOKEN}}
        tag: ${{ needs.architecture.outputs.build_arch }}
        file: ${{ steps.makepkg.outputs.repofile0 }}
        overwrite: true
    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{secrets.GITHUB_TOKEN}}
        tag: ${{ needs.architecture.outputs.build_arch }}
        file: ${{ steps.makepkg.outputs.repofile1 }}
        overwrite: true
    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{secrets.GITHUB_TOKEN}}
        tag: ${{ needs.architecture.outputs.build_arch }}
        file: ${{ steps.makepkg.outputs.repofile2 }}
        overwrite: true
    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{secrets.GITHUB_TOKEN}}
        tag: ${{ needs.architecture.outputs.build_arch }}
        file: ${{ steps.makepkg.outputs.repofile3 }}
        overwrite: true
    - name: Ignore package folder
      run: | 
        grep /${{ inputs.repo_pkg }} .gitignore >/dev/null || echo /${{ inputs.repo_pkg }} >> .gitignore
    - name: Update version
      run: |
        [ -f versions/${{ inputs.repo_pkg }} ] || touch versions/${{ inputs.repo_pkg }} && git add versions/${{ inputs.repo_pkg }}
        echo ${{ needs.sanity.outputs.sum }} > versions/${{ inputs.repo_pkg }}
    - name: Commit changes
      run: |
        git config --global user.name 'Nick Marshall'
        git config --global user.email 'highkeep@users.noreply.github.com'
        git commit -am "Version control"
        git push