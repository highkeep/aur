name: template_aur

on:
  workflow_call:
    inputs:
      repo_url:
        required: true
        type: string
      repo_pkg:
        required: true
        type: string
      build_arch:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      repo_url:
        required: true
        type: string
      repo_pkg:
        required: true
        type: string
      build_arch:
        required: true
        type: string

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - name: echo
      run: |
        echo "url: ${{ inputs.repo_url }}"
        echo "pkg: ${{ inputs.repo_pkg }}"
        echo "arch: ${{ inputs.build_arch }}"
  # check:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     status: ${{ steps.update.outputs.update }}
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #   - name: Compare Package
  #     id: update
  #     run: |
  #       source functions.sh && echo $(checkGitVersion ${{ env.REPO_URL }} ${{ env.REPO_PKG }}) >> $GITHUB_OUTPUT
  # package: 
  #   runs-on: ubuntu-latest
  #   needs: check
  #   if: ${{ needs.check.outputs.status == 'true' }}
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #   - name: Clone Package
  #     run: |
  #       git clone ${{ env.REPO_URL }}/${{ env.REPO_PKG }}.git
  #   - name: Swap in ${{ env.ARCH }}
  #     run: |
  #       sed -i 's/=nocona/=${{ env.ARCH }}/g;s/=core-avx2/=${{ env.ARCH }}/g' ${{ env.REPO_PKG }}/PKGBUILD
  #   - name: Makepkg Build and Check
  #     id: makepkg
  #     uses: highkeep/pkgbuild-action@master
  #     with:
  #       pkgdir: ${{ env.REPO_PKG }}
  #       pacmanConf: "configs/${{ env.ARCH }}_pacman.conf"
  #       makepkgConf: "configs/${{ env.ARCH }}_makepkg.conf"
  #       repoReleaseTag: "${{ env.ARCH }}"
  #   - name: Print Package Files
  #     run: |
  #       echo "Successfully created the following package archive"
  #       echo "Package: ${{ steps.makepkg.outputs.pkgfile0 }}"
  #       echo "Package: ${{ steps.makepkg.outputs.repofile0 }}"
  #       echo "Package: ${{ steps.makepkg.outputs.repofile1 }}"
  #       echo "Package: ${{ steps.makepkg.outputs.repofile2 }}"
  #       echo "Package: ${{ steps.makepkg.outputs.repofile3 }}"
  #   - uses: svenstaro/upload-release-action@v2
  #     with:
  #       repo_token: ${{secrets.GITHUB_TOKEN}}
  #       tag: ${{ env.ARCH }}
  #       file: ${{ steps.makepkg.outputs.pkgfile0 }}
  #       overwrite: true
  #   - uses: svenstaro/upload-release-action@v2
  #     with:
  #       repo_token: ${{secrets.GITHUB_TOKEN}}
  #       tag: ${{ env.ARCH }}
  #       file: ${{ steps.makepkg.outputs.repofile0 }}
  #       overwrite: true
  #   - uses: svenstaro/upload-release-action@v2
  #     with:
  #       repo_token: ${{secrets.GITHUB_TOKEN}}
  #       tag: ${{ env.ARCH }}
  #       file: ${{ steps.makepkg.outputs.repofile1 }}
  #       overwrite: true
  #   - uses: svenstaro/upload-release-action@v2
  #     with:
  #       repo_token: ${{secrets.GITHUB_TOKEN}}
  #       tag: ${{ env.ARCH }}
  #       file: ${{ steps.makepkg.outputs.repofile2 }}
  #       overwrite: true
  #   - uses: svenstaro/upload-release-action@v2
  #     with:
  #       repo_token: ${{secrets.GITHUB_TOKEN}}
  #       tag: ${{ env.ARCH }}
  #       file: ${{ steps.makepkg.outputs.repofile3 }}
  #       overwrite: true
  #   - name: Ignore package folder
  #     run: | 
  #       grep /${{ env.REPO_PKG }} .gitignore >/dev/null || echo /${{ env.REPO_PKG }} >> .gitignore
  #   - name: Update version
  #     run: |
  #       [ -f versions/${{ env.REPO_PKG }} ] || touch versions/${{ env.REPO_PKG }} && git add versions/${{ env.REPO_PKG }}
  #       echo `git -C ${{ env.REPO_PKG }} rev-parse HEAD` > versions/${{ env.REPO_PKG }}
  #   - name: Commit changes
  #     run: |
  #       git config --global user.name 'Nick Marshall'
  #       git config --global user.email 'highkeep@users.noreply.github.com'
  #       git commit -am "Version control"
  #       git push